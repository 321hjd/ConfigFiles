" Vim with all enhancements
source $VIMRUNTIME/vimrc_example.vim

" Use the internal diff if available.
" Otherwise use the special 'diffexpr' for Windows.
if &diffopt !~# 'internal'
  set diffexpr=MyDiff()
endif
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction
"----------------------------原始_vimrc文件内容--------------------------

"----------------------------配置基本功能--------------------------------
set encoding=utf-8
set fileencodings=utf-8,gbk,gb18030,gk2312
source $VIMRUNTIME\delmenu.vim
source $VIMRUNTIME\menu.vim
colorscheme darkblue       "设置背景颜色为深蓝色
set guifont=Consolas:h11:cANSI:qDRAFT  "设置字体
syntax enable              "开启语法高亮功能
syntax on                  "自动语法高亮
set t_Co=256               "开启256色支持
set ruler                  "总是显示光标的位置
set laststatus=2           "总是显示状态栏
set number                 "开启行号显示
set cursorline             "高亮显示当前行
set autoindent             "设置自动缩进
set smartindent            "智能选择对齐方式
set tabstop=4              "设置编辑时制表符所占的空格数
set softtabstop=4          "设置4个空格为制表符
set shiftwidth=4		   "设置格式化时制表符占用的空格数
set smarttab               "在行和段开始处使用制表符
set showmatch			   "设置光标遇到()、[]、{}等自动高亮对应另一个
set wrap				   "设置自动折行
set textwidth=0			   "VIM默认字符超过78会自动换行，这里取消自动换行(其实这里设置是没用的，因为GVIM会先加载此文件，然后加载vimrc_example.vim，该文件设置了textwidth=78，因此此设置被覆盖了)
set sm					   "设置高亮匹配括号
filetype on                "设置开启文件类型侦测
filetype indent on         "自适应不同语言的智能缩进
"设置各个文件保存目录
"set backupdir=D:/18482/Vimfiles/backup//
"set directory=D:/18482/Vimfiles/swp//
"set undodir=D:/18482/Vimfiles/undo//

" 隐藏GVIM菜单及设置
set lines=25 columns=100   " 窗口大小
" 分割出来的窗口位于当前窗口下边/右边
set splitbelow
set splitright
"不显示工具/菜单栏
set guioptions-=T
set guioptions-=m
set guioptions-=L
set guioptions-=r
set guioptions-=b
" 使用内置 tab 样式而不是 gui
set guioptions-=e
set nolist

let mapleader = ","		   "定义<leader>键，便于简化指令
"快速打开配置文件_vimrc（指令为 ,e）
nnoremap <leader>e :vs ~/_vimrc<cr>
"刷新配置（指令为 ,r）
nnoremap <leader>r :source $MYVIMRC<cr>
"快速打开帮助文档设置（自己下载的文档）
"快速打开最佳vim技巧（垂直分割模式）
nnoremap <leader>v :vs ~\vimfiles\note\vim-cheatsheet.txt<cr>
"快速打开vim-cheatsheet（垂直分割模式）
nnoremap <leader>g :vs ~\vimfiles\note\git-cheatsheet.txt<cr>
"快速打开bash-cheatsheet（垂直分割模式）
nnoremap <leader>b :vs ~\vimfiles\note\bash-cheatsheet.txt<cr>
"快速打开LaTex-cheatsheet（垂直分割模式）
nnoremap <leader>l :vs ~\vimfiles\note\LaTex-cheatsheet.txt<cr>
"----------------------------配置基本功能-------------------------------
"----------------------------ctags配置，实现函数跳转功能----------------
"自动切换目录并指定tag文件,注意生成ctags文件需要在命令行模式执行!tags -R
"set tags=./tags;,tags
"set autochdir

"-----------------------------------------------------------------------

"----------------------------配置编译调试-------------------------------
func CompileRun()
	exec "w"
	"C程序
	if &filetype == 'c'
		exec "!gcc -Wall -enable-auto-import % -g -o %<.exe"
	"c++程序
	elseif &filetype == 'cpp'
		exec "!g++ -Wall -enable-auto-import  % -g -o %<.exe"
	"Java程序
	elseif &filetype == 'java'
		exec "!javac %"
	endif
endfunc
"定义Run函数
func Run()
	if &filetype == 'c' || &filetype == 'cpp'
		exec "!%<.exe"
	elseif &filetype == 'java'
		exec "!java %<"
	endif
endfunc
"定义Debug函数，用来调试程序
func Debug()
	exec "w"
	"C程序
	if &filetype == 'c'
		exec "!gcc % -g -o %<.exe"
		exec "!gdb %<.exe"
	elseif &filetype == 'cpp'
		exec "!g++ % -g -o %<.exe"
		exec "!gdb %<.exe"
	"Java程序
	elseif &filetype == ‘java’
	exec "!javac %"
	exec "!jdb %<"
	endif
endfunc
"设置程序的运行和调试的快捷键F5和Ctrl-F5
map <F5> :call CompileRun()<CR>
map <F6> :call Run()<CR>
map <C-F5> :call Debug()<CR>
"----------------------------配置编译调试-------------------------------

"----------------------------配置c/c++代码自动补全----------------------
"括号自动补全
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap < <><ESC>i
:inoremap > <c-r>=ClosePair('>')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

"----------------------------配置c/c++代码自动补全----------------------


"------------------------------配置插件相关--------------------------


"------------------------------配置插件相关--------------------------
